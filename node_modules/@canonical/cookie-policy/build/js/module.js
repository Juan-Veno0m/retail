function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var controlsContent = [{
  id: 'essential',
  showSwitcher: false,
  content: {
    default: {
      title: 'Essential',
      description: "Enables the site's core functionality, such as navigation, access to secure areas, video players and payments. The site cannot function properly without these cookies; they can only be disabled by changing your browser preferences."
    },
    zh: {
      title: '必要性',
      description: '启用网站核心功能，例如导航，访问安全区域，视频播放器和支付。没有这些cookie网站不能正常工作；它们仅可通过修改浏览器偏好设置禁用。'
    },
    ja: {
      title: 'エッセンシャル',
      description: '移動、保護されている情報へのアクセス、動画再生、支払など、サイトの基本的な機能が有効になります。これらのクッキーが有効になっていない（お使いのブラウザの設定を変更することによってクッキーが無効化されている）場合、サイトは正しく表示されません。'
    }
  }
}, {
  id: 'performance',
  showSwitcher: true,
  content: {
    default: {
      title: 'Performance',
      description: 'Collects information on site usage, for example, which pages are most frequently visited.'
    },
    zh: {
      title: '表现性',
      description: '网站使用信息收集，例如哪些网页被频繁访问。'
    },
    ja: {
      title: 'パフォーマンス',
      description: 'サイトの利用状況に関する情報を収集します。例として、どのページの訪問頻度が高いかのような情報です。'
    }
  }
}, {
  id: 'functionality',
  showSwitcher: true,
  content: {
    default: {
      title: 'Functionality',
      description: 'Recognises you when you return to our site. This enables us to personalise content, greet you by name, remember your preferences, and helps you share pages on social networks.'
    },
    zh: {
      title: '功能性',
      description: '当你返回到我们网站时能识别您。这使得我们能个性化内容，欢迎您，记住您的偏好设置，以及帮助您分享网页到社交媒体。'
    },
    ja: {
      title: '機能性',
      description: 'お客様がサイトを再訪問したときに、お客様であることを認識します。この設定では、お客様に合わせたコンテンツの表示、お客様のお名前を用いたあいさつメッセージの表示、お客様の傾向の記録を当社が行えるようになります。また、お客様がソーシャルネットワークでページをシェアできるようになります。'
    }
  }
}];
var content = {
  default: {
    notification: {
      title: 'Your tracker settings',
      body1: 'We use cookies and similar methods to recognise visitors and remember preferences. We also use them to measure campaign effectiveness and analyse site traffic.',
      body2: 'By selecting ‘Accept‘, you consent to the use of these methods by us and trusted third parties.',
      body3: 'For further details or to change your consent choices at any time see our <a href="https://ubuntu.com/legal/data-privacy?cp=hide#cookies">cookie policy</a>.',
      buttonAccept: 'Accept all and visit site',
      buttonManage: 'Manage your tracker settings'
    },
    manager: {
      title: 'Tracking choices',
      body1: 'We use cookies to recognise visitors and remember your preferences.',
      body2: 'They enhance user experience, personalise content and ads, provide social media features, measure campaign effectiveness, and analyse site traffic.',
      body3: 'Select the types of trackers you consent to, both by us, and third parties.',
      body4: 'Learn more at <a href="https://ubuntu.com/legal/data-privacy?cp=hide#cookies">data privacy: cookie policy</a> - you can change your choices at any time from the footer of the site.',
      acceptAll: 'Accept all',
      acceptAllHelp: 'This will switch all toggles "ON".',
      SavePreferences: 'Save preferences'
    }
  },
  zh: {
    notification: {
      title: '您的追踪器设置',
      body1: '我们使用cookie和相似的方法来识别访问者和记住偏好设置。我们也用它们来衡量活动的效果和网站流量分析。',
      body2: '选择”接受“，您同意我们和受信的第三方来使用这些方式。',
      body3: '更多内容或者随时地变更您的同意选择，请点击我们的 <a href="https://ubuntu.com/legal/data-privacy?cp=hide#cookies">cookie策略</a>.',
      buttonAccept: '接受全部和访问网站',
      buttonManage: '管理您的追踪器设置'
    },
    manager: {
      title: '追踪选项',
      body1: '我们使用cookie来识别访问者和记住您的偏好设置',
      body2: '它们增强用户体验，使内容和广告个性化，提供社交媒体功能，衡量活动效果和网站流量分析。',
      body3: '选择您同意授予我们和受信的第三方的追踪类型。',
      body4: '点击<a href="https://ubuntu.com/legal/data-privacy?cp=hide#cookies">数据隐私：cookie策略</a>了解更多，您可以在网站底部随时更改您的选择。',
      acceptAll: '接受全部',
      acceptAllHelp: '这将把全部开关变为”开启“。',
      SavePreferences: '保存偏好设置'
    }
  },
  ja: {
    notification: {
      title: 'トラッキング機能の設定',
      body1: '当社は、当社のウェブサイトを訪問された方の識別や傾向の記録を行うために、クッキーおよび類似の手法を利用します。また、キャンペーンの効果の測定やサイトのトラフィックの分析にもクッキーを利用します。',
      body2: '「同意」を選択すると、当社および信頼できる第三者による上記の手法の利用に同意したものとみなされます。',
      body3: '詳細または同意の変更については、いつでも当社の<a href="https://ubuntu.com/legal/data-privacy?cp=hide#cookies">クッキーに関するポリシー</a>をご覧になることができます。',
      buttonAccept: 'すべて同意してサイトにアクセス',
      buttonManage: 'トラッキング機能の設定の管理'
    },
    manager: {
      title: 'トラッキング機能の選択',
      body1: '当社は、当社のウェブサイトを訪問された方の識別や傾向の記録を行うために、クッキーを利用します。',
      body2: 'クッキーは、お客様の利便性の向上、お客様に合わせたコンテンツや広告の表示、ソーシャルメディア機能の提供、キャンペーンの効果の測定、サイトのトラフィックの分析に役立ちます。',
      body3: '当社および第三者によるトラッキング機能のタイプから、お客様が同意されるものをお選びください。',
      body4: '詳細は、<a href="https://ubuntu.com/legal/data-privacy?cp=hide#cookies">データプライバシー：クッキーに関するポリシー</a>をご覧ください。お客様が選んだ設定は、本サイトの下部からいつでも変更できます。',
      acceptAll: 'すべて同意',
      acceptAllHelp: '同意されるとすべての設定が「ON」に切り替わります。',
      SavePreferences: '設定を保存'
    }
  }
};

var setCookie = function setCookie(value) {
  var d = new Date();
  d.setTime(d.getTime() + 365 * 24 * 60 * 60 * 1000);
  var expires = 'expires=' + d.toUTCString();
  var samesite = 'samesite=lax;';
  var path = 'path=/;';
  document.cookie = '_cookies_accepted=' + value + '; ' + expires + '; ' + samesite + path;

  if (enabledTracking(value)) {
    pushPageview();
  }
};
var getCookie = function getCookie() {
  var toMatch = '_cookies_accepted=';
  var splitArray = document.cookie.split(';');
  var cookieValue = '';
  var currentCookieValue = '';

  for (var i = 0; i < splitArray.length; i++) {
    var cookie = splitArray[i];

    while (cookie.charAt(0) == ' ') {
      cookie = cookie.substring(1);
    }

    currentCookieValue = cookie.substring(toMatch.length, cookie.length);

    if (cookie.indexOf(toMatch) === 0 && currentCookieValue !== 'true') {
      cookieValue = currentCookieValue;
    }
  }

  return cookieValue;
};
var preferenceNotSelected = function preferenceNotSelected() {
  var cookieValue = getCookie(); // Skip a value of "true" to override old existing cookies

  if (cookieValue && cookieValue != 'true') {
    return false;
  } else {
    return true;
  }
};
var hideSpecified = function hideSpecified() {
  var urlParams = new URLSearchParams(window.location.search);
  var cpQuery = urlParams.get('cp');

  if (cpQuery === 'hide') {
    return true;
  } else {
    return false;
  }
};
var getContent = function getContent(language) {
  if (content[language]) {
    return content[language];
  } else {
    return content['default'];
  }
};
var getControlsContent = function getControlsContent(details, language) {
  if (details.content[language]) {
    return details.content[language];
  } else {
    return details.content['default'];
  }
};

var pushPageview = function pushPageview() {
  if ((typeof dataLayer === "undefined" ? "undefined" : _typeof(dataLayer)) === 'object') {
    dataLayer.push({
      event: 'pageview'
    });
  }
};

var enabledTracking = function enabledTracking(selectedPreference) {
  if (selectedPreference == 'all' || selectedPreference == 'performance') {
    return true;
  } else {
    return false;
  }
};

var Notification = /*#__PURE__*/function () {
  function Notification(container, renderManager, destroyComponent) {
    _classCallCheck(this, Notification);

    this.container = container;
    this.renderManager = renderManager;
    this.destroyComponent = destroyComponent;
  }

  _createClass(Notification, [{
    key: "getNotificationMarkup",
    value: function getNotificationMarkup(language) {
      var notificationContent = getContent(language);
      var notification = "\n      <div class=\"p-modal\" id=\"modal\">\n        <div class=\"p-modal__dialog\" role=\"dialog\" aria-labelledby=\"cookie-policy-title\" aria-describedby=\"cookie-policy-content\">\n        <header class=\"p-modal__header\">\n          <h2 class=\"p-modal__title\" id=\"cookie-policy-title\">".concat(notificationContent.notification.title, "</h2>\n        </header>\n        <div id=\"cookie-policy-content\">\n          <p>").concat(notificationContent.notification.body1, "</p>\n          <p>").concat(notificationContent.notification.body2, "</p>\n          <p>").concat(notificationContent.notification.body3, "</p>\n          <p class=\"u-no-margin--bottom\">\n            <button class=\"p-button--positive js-close\" id=\"cookie-policy-button-accept\">").concat(notificationContent.notification.buttonAccept, "</button>\n            <button class=\"p-button--neutral u-no-margin--bottom js-manage\">").concat(notificationContent.notification.buttonManage, "</button>\n          </p>\n        </div>\n      </div>");
      return notification;
    }
  }, {
    key: "render",
    value: function render(language) {
      this.container.innerHTML = this.getNotificationMarkup(language);
      this.initaliseListeners();
    }
  }, {
    key: "initaliseListeners",
    value: function initaliseListeners() {
      var _this = this;

      this.container.querySelector('.js-close').addEventListener('click', function (e) {
        setCookie('all');

        _this.destroyComponent();
      });
      this.container.querySelector('.js-manage').addEventListener('click', function (e) {
        _this.renderManager();
      });
    }
  }]);

  return Notification;
}();

var Control = /*#__PURE__*/function () {
  function Control(details, container, language) {
    _classCallCheck(this, Control);

    this.language = language;
    this.id = details.id;
    this.title = getControlsContent(details, language).title;
    this.description = getControlsContent(details, language).description;
    this.showSwitcher = details.showSwitcher;
    this.container = container;
    this.element; // Rendering off the bat here as this is a dumb component.
    // It saves creating a variable and calling .render() on it.

    this.render();
  }

  _createClass(Control, [{
    key: "render",
    value: function render() {
      var control = document.createElement('div');
      control.classList.add('u-sv3');
      control.innerHTML = "\n      ".concat(this.showSwitcher ? "<label class=\"u-float-right\">\n        <input type=\"checkbox\" class=\"p-switch js-".concat(this.id, "-switch\">\n        <div class=\"p-switch__slider\"></div>\n      </label>") : '', "\n      <h4>").concat(this.title, "</h4>\n      <p>").concat(this.description, "</p>");
      this.container.appendChild(control);
      this.element = control.querySelector(".js-".concat(this.id, "-switch"));
    }
  }, {
    key: "isChecked",
    value: function isChecked() {
      return this.element ? this.element.checked : true;
    }
  }, {
    key: "getId",
    value: function getId() {
      return this.id;
    }
  }]);

  return Control;
}();

var Manager = /*#__PURE__*/function () {
  function Manager(container, destroyComponent) {
    _classCallCheck(this, Manager);

    this.container = container;
    this.controlsStore = [];
    this.destroyComponent = destroyComponent;
  }

  _createClass(Manager, [{
    key: "getManagerMarkup",
    value: function getManagerMarkup(language) {
      var managerContent = getContent(language).manager;
      var manager = "\n    <div class=\"p-modal\" id=\"modal\">\n    <div class=\"p-modal__dialog\" role=\"dialog\" aria-labelledby=\"modal-title\" aria-describedby=\"modal-description\">\n      <header class=\"p-modal__header\">\n        <h2 class=\"p-modal__title\" id=\"modal-title\">".concat(managerContent.title, "</h2>\n      </header>\n      <p id=\"modal-description\">").concat(managerContent.body1, "</p>\n      <p>").concat(managerContent.body2, "</p>\n      <p>").concat(managerContent.body3, "</p>\n      <p>").concat(managerContent.body4, "</p>\n      <p><button class=\"p-button--positive u-no-margin--bottom js-close\">").concat(managerContent.acceptAll, "</button></p>\n      <p>").concat(managerContent.acceptAllHelp, "</p>\n      <hr />\n      <div class=\"controls\"></div>\n      <button class=\"p-button--neutral js-save-preferences\">").concat(managerContent.SavePreferences, "</button>\n    </div>\n  </div>");
      return manager;
    }
  }, {
    key: "render",
    value: function render(language) {
      var _this = this;

      this.container.innerHTML = this.getManagerMarkup(language);
      var controlsContainer = this.container.querySelector('.controls');
      controlsContent.forEach(function (controlDetails) {
        var control = new Control(controlDetails, controlsContainer, language);

        _this.controlsStore.push(control);
      });
      this.initaliseListeners();
    }
  }, {
    key: "initaliseListeners",
    value: function initaliseListeners() {
      var _this2 = this;

      this.container.querySelector('.js-close').addEventListener('click', function () {
        setCookie('all');

        _this2.destroyComponent();
      });
      this.container.querySelector('.js-save-preferences').addEventListener('click', function () {
        _this2.savePreferences();

        _this2.destroyComponent();
      });
    }
  }, {
    key: "savePreferences",
    value: function savePreferences() {
      var checkedControls = this.controlsStore.filter(function (control) {
        return control.isChecked();
      });

      if (this.controlsStore.length === checkedControls.length) {
        setCookie('all');
      } else {
        this.controlsStore.forEach(function (control) {
          if (control.isChecked()) {
            setCookie(control.getId());
          }
        });
      }
    }
  }]);

  return Manager;
}();

var cookiePolicy = function cookiePolicy() {
  var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var cookiePolicyContainer = null;
  var language = document.documentElement.lang;

  var renderNotification = function renderNotification(e) {
    if (e) {
      e.preventDefault();
    }

    if (cookiePolicyContainer === null) {
      cookiePolicyContainer = document.createElement('dialog');
      cookiePolicyContainer.classList.add('cookie-policy');
      cookiePolicyContainer.setAttribute('open', true);
      document.body.appendChild(cookiePolicyContainer);
      var notifiation = new Notification(cookiePolicyContainer, renderManager, close);
      notifiation.render(language);
      document.getElementById('cookie-policy-button-accept').focus();
    }
  };

  var renderManager = function renderManager() {
    var manager = new Manager(cookiePolicyContainer, close);
    manager.render(language);
  };

  var close = function close() {
    if (typeof callback === 'function') {
      callback();
    }

    document.body.removeChild(cookiePolicyContainer);
    cookiePolicyContainer = null;
  };

  var init = function init() {
    var revokeButton = document.querySelector('.js-revoke-cookie-manager');

    if (revokeButton) {
      revokeButton.addEventListener('click', renderNotification);
    }

    if (preferenceNotSelected() && !hideSpecified()) {
      renderNotification();
    }
  };

  document.addEventListener('DOMContentLoaded', init, false);
};

export { cookiePolicy };
//# sourceMappingURL=module.js.map
